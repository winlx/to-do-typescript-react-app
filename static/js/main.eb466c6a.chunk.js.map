{"version":3,"sources":["helpers/antForm/hasErrors.ts","state/actionTypes.ts","state/actions.ts","components/AddingTast.tsx","components/ToDoList/components/Task.tsx","components/ToDoList/ToDoList.tsx","state/reducer.ts","App.tsx","index.tsx"],"names":["hasErrors","fieldsError","Object","keys","some","field","ADD_TASK","EDIT_TASK","REMOVE_TASK","editTask","task","type","payload","Form","create","name","props","dispatch","form","getFieldDecorator","getFieldsError","getFieldValue","validateFields","resetFields","submit","useCallback","taskVal","react_default","a","createElement","row_default","col_default","span","form_default","Item","rules","required","message","input_default","prefix","icon_default","placeholder","offset","button_default","shape","icon","onClick","disabled","id","desc","isFinished","remove","changeStatus","val","_useState","useState","_useState2","slicedToArray","isEditing","setIsEditing","inputRef","useRef","switchEditMode","prevState","useEffect","current","focus","changeDesc","ev","parentRowRelTarg","relatedTarget","closest","parentRowCurTarg","currentTarget","isEditButton","classList","contains","className","initialValue","ref","onBlur","typography_default","Text","delete","switch_default","onChange","size","ToDoList","tasks","Fragment","map","components_Task","key","initialState","reducer","state","arguments","length","undefined","action","arr","values","sort","b","sortOrder","taskId","nanoid","objectSpread","defineProperty","newState","App","_useReducer","useReducer","_useReducer2","sortedTasks","useMemo","card_default","divider_default","AddingTast","components_ToDoList_ToDoList","ReactDOM","render","src_App_0","document","getElementById"],"mappings":"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","file":"static/js/main.eb466c6a.chunk.js","sourcesContent":["export default function hasErrors(\r\n  fieldsError: Record<string, string[] | undefined>\r\n): boolean {\r\n  return Object.keys(fieldsError).some(field => fieldsError[field]);\r\n}\r\n","export const ADD_TASK = 'ADD_TASK';\r\nexport const EDIT_TASK = 'EDIT_TASK';\r\nexport const REMOVE_TASK = 'REMOVE_TASK';\r\n","import { ADD_TASK, EDIT_TASK, REMOVE_TASK } from './actionTypes';\r\nimport { EditTaskPayload, Actions } from './types';\r\n\r\nexport function addTask(taskDesc: string): Actions {\r\n  return {\r\n    type: ADD_TASK,\r\n    payload: taskDesc\r\n  };\r\n}\r\n\r\nexport function editTask(task: EditTaskPayload): Actions {\r\n  return {\r\n    type: EDIT_TASK,\r\n    payload: task\r\n  };\r\n}\r\n\r\nexport function removeTask(taskId: string): Actions {\r\n  return {\r\n    type: REMOVE_TASK,\r\n    payload: taskId\r\n  };\r\n}\r\n","import React, { useCallback } from 'react';\r\nimport Form, { FormComponentProps } from 'antd/lib/form';\r\nimport 'antd/lib/form/style/css';\r\nimport Input from 'antd/lib/input';\r\nimport 'antd/lib/input/style/css';\r\nimport Icon from 'antd/lib/icon';\r\nimport 'antd/lib/icon/style/css';\r\nimport Button from 'antd/lib/button';\r\nimport 'antd/lib/button/style/css';\r\nimport Row from 'antd/lib/row';\r\nimport 'antd/lib/row/style/css';\r\nimport Col from 'antd/lib/col';\r\nimport 'antd/lib/col/style/css';\r\nimport hasErrors from 'helpers/antForm/hasErrors';\r\nimport { addTask } from 'state/actions';\r\nimport { Actions } from 'state/types';\r\n\r\ninterface Props extends FormComponentProps {\r\n  dispatch: React.Dispatch<Actions>;\r\n}\r\n\r\nconst AddingTask: React.FC<Props> = props => {\r\n  const { dispatch, form } = props;\r\n\r\n  const {\r\n    getFieldDecorator,\r\n    getFieldsError,\r\n    getFieldValue,\r\n    validateFields,\r\n    resetFields\r\n  } = form;\r\n\r\n  const submit = useCallback(() => {\r\n    validateFields();\r\n\r\n    const taskVal = getFieldValue('task');\r\n\r\n    if (!taskVal) return;\r\n\r\n    dispatch(addTask(taskVal));\r\n    resetFields();\r\n  }, [dispatch, validateFields, getFieldValue, resetFields]);\r\n\r\n  return (\r\n    <Row>\r\n      <Col span={18}>\r\n        <Form.Item>\r\n          {getFieldDecorator('task', {\r\n            rules: [{ required: true, message: 'Введите описание задачи!' }]\r\n          })(\r\n            <Input\r\n              prefix={<Icon type=\"schedule\" />}\r\n              placeholder=\"Описание задачи\"\r\n            />\r\n          )}\r\n        </Form.Item>\r\n      </Col>\r\n      <Col offset={1} span={5}>\r\n        <Form.Item>\r\n          <Button\r\n            shape=\"circle\"\r\n            icon=\"plus\"\r\n            onClick={submit}\r\n            disabled={hasErrors(getFieldsError())}\r\n          />\r\n        </Form.Item>\r\n      </Col>\r\n    </Row>\r\n  );\r\n};\r\n\r\nexport default Form.create<Props>({ name: 'addingTask' })(AddingTask);\r\n","import React, { useCallback, useState, useEffect, useRef } from 'react';\r\nimport Row from 'antd/lib/row';\r\nimport 'antd/lib/row/style/css';\r\nimport Col from 'antd/lib/col';\r\nimport 'antd/lib/col/style/css';\r\nimport Form, { FormComponentProps } from 'antd/lib/form';\r\nimport 'antd/lib/form/style/css';\r\nimport Button from 'antd/lib/button';\r\nimport 'antd/lib/button/style/css';\r\nimport Input from 'antd/lib/input';\r\nimport 'antd/lib/input/style/css';\r\nimport Typography from 'antd/lib/typography';\r\nimport 'antd/lib/typography/style/css';\r\nimport Switch from 'antd/lib/switch';\r\nimport 'antd/lib/switch/style/css';\r\nimport { editTask, removeTask } from 'state/actions';\r\nimport hasErrors from 'helpers/antForm/hasErrors';\r\nimport { Task as TaskType, Actions } from 'state/types';\r\n\r\ninterface Props extends FormComponentProps {\r\n  dispatch: React.Dispatch<Actions>;\r\n  task: TaskType;\r\n}\r\n\r\nconst Task: React.FC<Props> = props => {\r\n  const { dispatch, task, form } = props;\r\n\r\n  const { id, desc, isFinished } = task;\r\n\r\n  const {\r\n    getFieldDecorator,\r\n    getFieldsError,\r\n    getFieldValue,\r\n    validateFields\r\n  } = form;\r\n\r\n  const remove = useCallback(() => {\r\n    dispatch(removeTask(id));\r\n  }, [dispatch, id]);\r\n\r\n  const changeStatus = useCallback(\r\n    val => {\r\n      dispatch(editTask({ id, isFinished: val }));\r\n    },\r\n    [dispatch, id]\r\n  );\r\n\r\n  const [isEditing, setIsEditing] = useState(false);\r\n  const inputRef = useRef<Input>(null);\r\n\r\n  const switchEditMode = useCallback(\r\n    () => setIsEditing(prevState => !prevState),\r\n    [setIsEditing]\r\n  );\r\n\r\n  useEffect(() => {\r\n    if (isEditing && inputRef.current) inputRef.current.focus();\r\n  }, [isEditing, inputRef]);\r\n\r\n  const changeDesc = useCallback(\r\n    ev => {\r\n      validateFields();\r\n\r\n      const taskVal = getFieldValue('task');\r\n\r\n      if (!taskVal) return;\r\n\r\n      dispatch(editTask({ id, desc: taskVal }));\r\n\r\n      const parentRowRelTarg =\r\n        ev.relatedTarget && ev.relatedTarget.closest('.to-do-app__task-row');\r\n      const parentRowCurTarg = ev.currentTarget.closest('.to-do-app__task-row');\r\n      const isEditButton =\r\n        !!ev.relatedTarget &&\r\n        ev.relatedTarget.classList.contains('to-do-app__edit-button');\r\n\r\n      if (parentRowRelTarg !== parentRowCurTarg) switchEditMode();\r\n      if (!isEditButton && parentRowRelTarg === parentRowCurTarg)\r\n        switchEditMode();\r\n    },\r\n    [id, dispatch, validateFields, getFieldValue, switchEditMode]\r\n  );\r\n\r\n  return (\r\n    <Row className=\"to-do-app__task-row\">\r\n      <Col span={18}>\r\n        <Form.Item>\r\n          {isEditing ? (\r\n            getFieldDecorator('task', {\r\n              initialValue: desc,\r\n              rules: [{ required: true, message: 'Введите описание задачи!' }]\r\n            })(\r\n              <Input\r\n                ref={inputRef}\r\n                onBlur={changeDesc}\r\n                placeholder=\"Описание задачи\"\r\n              />\r\n            )\r\n          ) : (\r\n            <Typography.Text delete={isFinished}>{desc}</Typography.Text>\r\n          )}\r\n        </Form.Item>\r\n      </Col>\r\n      <Col offset={1} span={1}>\r\n        <Form.Item>\r\n          {getFieldDecorator('isFinished', {\r\n            initialValue: isFinished\r\n          })(<Switch onChange={changeStatus} size=\"small\" />)}\r\n        </Form.Item>\r\n      </Col>\r\n      <Col offset={1} span={1}>\r\n        <Form.Item>\r\n          <Button\r\n            className=\"to-do-app__edit-button\"\r\n            shape=\"circle\"\r\n            icon=\"edit\"\r\n            onClick={switchEditMode}\r\n            disabled={hasErrors(getFieldsError())}\r\n          />\r\n        </Form.Item>\r\n      </Col>\r\n      <Col offset={1} span={1}>\r\n        <Form.Item>\r\n          <Button shape=\"circle\" icon=\"delete\" onClick={remove} />\r\n        </Form.Item>\r\n      </Col>\r\n    </Row>\r\n  );\r\n};\r\n\r\nexport default Form.create<Props>({ name: 'task' })(Task);\r\n","import React from 'react';\r\nimport { Task as TaskType, Actions } from 'state/types';\r\nimport Task from './components/Task';\r\n\r\ninterface Props {\r\n  tasks: TaskType[];\r\n  dispatch: React.Dispatch<Actions>;\r\n}\r\n\r\nconst ToDoList: React.FC<Props> = props => {\r\n  const { tasks } = props;\r\n\r\n  return (\r\n    <>\r\n      {tasks.map(task => (\r\n        <Task key={task.id} task={task} dispatch={props.dispatch} />\r\n      ))}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default ToDoList;\r\n","import nanoid from 'nanoid';\r\nimport { ADD_TASK, EDIT_TASK, REMOVE_TASK } from './actionTypes';\r\nimport { Actions, Task } from './types';\r\n\r\ninterface State {\r\n  [key: string]: Task;\r\n}\r\n\r\nexport const initialState: State = {};\r\n\r\nexport default function reducer(state = initialState, action: Actions): State {\r\n  switch (action.type) {\r\n    case ADD_TASK: {\r\n      const arr = Object.values(state);\r\n      arr.sort((a, b) => a.sortOrder - b.sortOrder);\r\n      const sortOrder: number = arr.length\r\n        ? arr[arr.length - 1].sortOrder + 1\r\n        : 1;\r\n      const taskId = nanoid();\r\n\r\n      return {\r\n        ...state,\r\n        [taskId]: {\r\n          id: taskId,\r\n          desc: action.payload,\r\n          sortOrder,\r\n          isFinished: false\r\n        }\r\n      };\r\n    }\r\n\r\n    case EDIT_TASK: {\r\n      const newState = { ...state };\r\n      newState[action.payload.id] = {\r\n        ...newState[action.payload.id],\r\n        ...action.payload\r\n      };\r\n\r\n      return newState;\r\n    }\r\n\r\n    case REMOVE_TASK: {\r\n      const newState = { ...state };\r\n      delete newState[action.payload];\r\n\r\n      return newState;\r\n    }\r\n\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n","import React, { useReducer, useMemo } from 'react';\r\nimport Card from 'antd/lib/card';\r\nimport 'antd/lib/card/style/css';\r\nimport Divider from 'antd/lib/divider';\r\nimport 'antd/lib/divider/style/css';\r\nimport AddingTast from 'components/AddingTast';\r\nimport ToDoList from 'components/ToDoList/ToDoList';\r\nimport reducer, { initialState } from 'state/reducer';\r\nimport './App.css';\r\n\r\nconst App: React.FC = () => {\r\n  const [tasks, dispatch] = useReducer(reducer, initialState);\r\n\r\n  const sortedTasks = useMemo(() => {\r\n    const arr = Object.values(tasks);\r\n    return arr.sort((a, b) => a.sortOrder - b.sortOrder);\r\n  }, [tasks]);\r\n\r\n  return (\r\n    <Card className=\"to-do-app\">\r\n      <Divider>Добавление задачи</Divider>\r\n      <AddingTast dispatch={dispatch} />\r\n      <Divider>Список задач</Divider>\r\n      <ToDoList tasks={sortedTasks} dispatch={dispatch} />\r\n    </Card>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n"],"sourceRoot":""}